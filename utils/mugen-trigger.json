{
 "Abs (math)": {
  "fmt": "abs(0)",
  "doc": "Computes the absolute value of its argument."
 },
 "Acos (math)": {
  "fmt": "acos(0)",
  "doc": "Computes the arccosine (in radians) of the specified argument."
 },
 "AILevel": {
  "fmt": "AILevel",
  "doc": "Returns the difficulty level of the player's AI."
 },
 "Alive": {
  "fmt": "alive",
  "doc": "Returns 1 if the player is still able to fight, 0 if the player has been KOed."
 },
 "Anim": {
  "fmt": "Anim",
  "doc": "Returns the current animation action number of the player."
 },
 "AnimElem(*,***)": {
  "fmt": "AnimElem = 0",
  "doc": "Gets the animation-time elapsed since the start of a specified element of the current animation action. Useful for synchronizing events to elements of an animation action.\n(reminder: first element of an action is element 1, not 0) AnimElemTime has similar functionality to AnimElem, but can take expressions as its argument."
 },
 "AnimElemNo": {
  "fmt": "AnimElemNo(0)",
  "doc": "Returns the number of the animation element in the current action\nthat would be displayed at the specified time. The argument to AnimElemNo represents the time to check, expressed in game ticks, relative to the present."
 },
 "AnimElemTime": {
  "fmt": "AnimElemTime(0)",
  "doc": "Gets the animation-time elapsed since the start of a specified element of the current animation action. Useful for synchronizing events to elements of an animation action.\n(reminder: first element of an action is element 1, not 0)"
 },
 "AnimExist": {
  "fmt": "AnimExist(0)",
  "doc": "Returns 1 if the specified animation action exists for the player.\nThe result of this trigger is undefined if the player has been placed in a custom state by a successful hit. In this situation, use SelfAnimExist."
 },
 "AnimTime": {
  "fmt": "AnimTime",
  "doc": "Gives the difference between the looptime of the current animation action and the player's animation-time. Useful for knowing when the end of the animation has been reached. (Animation-time is the time in game-ticks that the player has spent within the current animation action.)\nThe name may be confusing. Try to think of it as \"time from the end of the animation\". During the animation, AnimTime will always return a non-positive number."
 },
 "Asin (math)": {
  "fmt": "asin(0)",
  "doc": "Computes the arcsine (in radians) of the specified argument."
 },
 "Atan (math)": {
  "fmt": "atan(0)",
  "doc": "Computes the arctangent (in radians) of the specified argument."
 },
 "AuthorName(*,***)": {
  "fmt": "AuthorName = \"\"",
  "doc": "Returns the player's author's name (specified in the .DEF file). This may also be useful for telling apart characters with the same name but different authors."
 },
 "BackEdgeBodyDist": {
  "fmt": "BackEdgeBodyDist",
  "doc": "BackEdgeBodyDist gives the distance from the back of the player, as determined by the end of his width bar, to the back edge of the screen."
 },
 "BackEdgeDist": {
  "fmt": "BackEdgeDist",
  "doc": "BackEdgeDist gives the distance between the x-axis of the player and the edge of the screen behind of the player."
 },
 "CanRecover": {
  "fmt": "CanRecover",
  "doc": "If the player is currently in a falling state, returns 1 if he is currently able to recover, and 0 if he is not currently able to recover. If the player is not currently falling, the output of this trigger is undefined."
 },
 "Ceil (math)": {
  "fmt": "ceil(0)",
  "doc": "Implements the \"ceiling\" function. Returns the least integer which is greater than or equal to the specified argument."
 },
 "Command(*,***)": {
  "fmt": "Command = \"\"",
  "doc": "Triggers if the user has input the specified command."
 },
 "Cond (math)": {
  "fmt": "Cond(\"\",\"\",\"\")",
  "doc": "This trigger takes three arguments. The first argument is a condition argument.\nIf the condition is true (i.e., nonzero), Cond evaluates and returns the second\nargument. If the condition is false, Cond evaluates and returns the third\nargument. If the condition is bottom, then Cond returns bottom without\nevaluating the second or third arguments. In all cases, any unused argument(s) are not evaluated. Therefore, Cond can be\nused instead of IfElse to avoid any side effects that would be caused by\nevaluating the unused argument (e.g., variable assignment, or performing a\ncomputation that would cause bottom to be generated)."
 },
 "Const(*)": {
  "fmt": "Const(\"\")",
  "doc": "Returns the value of one of the player's constants. Error conditions:\nnone"
 },
 "Const240p": {
  "fmt": "Const240p(0)",
  "doc": "Converts a value from the 240p coordinate space to the player's coordinate space.\nThe conversion ratio between coordinate spaces is the ratio of their widths."
 },
 "Const480p": {
  "fmt": "Const480p(0)",
  "doc": "Converts a value from the 480p coordinate space to the player's coordinate space.\nThe conversion ratio between coordinate spaces is the ratio of their widths."
 },
 "Const720p": {
  "fmt": "Const720p(0)",
  "doc": "Converts a value from the 720p coordinate space to the player's coordinate space.\nThe conversion ratio between coordinate spaces is the ratio of their widths."
 },
 "Cos (math)": {
  "fmt": "cos(0)",
  "doc": "Computes the cosine of the specified argument (in radians.)"
 },
 "Ctrl": {
  "fmt": "Ctrl",
  "doc": "Returns the control flag of p1."
 },
 "DrawGame": {
  "fmt": "Draw",
  "doc": "Returns 1 if the player (or the player's team, in team mode) has ended the round in a draw, 0 otherwise."
 },
 "E (math)": {
  "fmt": "e",
  "doc": "Returns the value of e (2.718281828...)"
 },
 "Exp (math)": {
  "fmt": "exp(0)",
  "doc": "Computes the exponential of the argument (e raised to the power of\nthe argument.) This produces slightly more accurate results than the\nequivalent expression e**(argument)."
 },
 "Facing": {
  "fmt": "Facing",
  "doc": "Returns 1 if the player is facing to the right, and -1 if the player is facing to the left."
 },
 "Floor (math)": {
  "fmt": "floor(0)",
  "doc": "Implements the floor function. Returns the greatest integer less than or equal to its argument."
 },
 "FrontEdgeBodyDist": {
  "fmt": "FrontEdgeBodyDist",
  "doc": "FrontEdgeBodyDist gives the distance between the front of the player (as determined by the front edge of his width bar) and the edge of the screen."
 },
 "FrontEdgeDist": {
  "fmt": "FrontEdgeDist",
  "doc": "FrontEdgeDist gives the distance between the x-axis of the player and the edge of the screen in front of the player."
 },
 "FVar": {
  "fmt": "FVar(0)",
  "doc": "This trigger takes a mandatory variable number as an argument. It returns the value of the player's specified float variable."
 },
 "GameHeight": {
  "fmt": "GameHeight",
  "doc": "Returns the height of the game space in the player's local coordinate space.\nThe game space is defined as a spatial mapping to the visible area of the screen\nin which players interact.  Intuitively, it can be thought of as encompassing the\ngraphical area of the game.\nThe dimensions of the game space is specified by the GameWidth and GameHeight\nparameters in mugen.cfg."
 },
 "GameTime": {
  "fmt": "GameTime",
  "doc": "Returns the total number of ticks that have elapsed in the game so far."
 },
 "GameWidth": {
  "fmt": "GameHeight",
  "doc": "Returns the width of the game space in the player's local coordinate space.\nThe game space is defined as a spatial mapping to the visible area of the screen\nin which players interact.  Intuitively, it can be thought of as encompassing the\ngraphical area of the game.\nThe dimensions of the game space is specified by the GameWidth and GameHeight\nparameters in mugen.cfg."
 },
 "GetHitVar(*)": {
  "fmt": "GetHitVar(\"\")",
  "doc": "When the player is in a gethit state, returns the value of the specified hit parameter."
 },
 "HitCount": {
  "fmt": "HitCount",
  "doc": "Returns the number times the player's current attack move has hit one or more opponents. This value is valid only for a single state; after any state change, it resets to 0. To prevent it from resetting to 0, set hitcountpersist in the StateDef (see cns documentation for details). The HitCount and UniqHitCount triggers differ only when the player is hitting more than one opponent. In the case where the player is hitting two opponents with the same attack, HitCount will increase by 1 for every hit, while UniqHitCount increases by 2."
 },
 "HitDefAttr(*,***)": {
  "fmt": "HitDefAttr = 0, 0",
  "doc": "Checks the attribute parameter of the player's currently-active HitDef.\nIf the player is not currently attacking, then no parameters will match.\nCan be used for simple move-interrupts from weaker to stronger attacks in the CMD file. Note: HitDefAttr != value1, value2 is logically equivalent to\n!(HitDefAttr = value1, value2)."
 },
 "HitFall": {
  "fmt": "HitFall",
  "doc": "If the player is currently in a gethit state, returns the fall flag of the hit. The output of this trigger is undefined if the player is not in a gethit state. For an explanation of the fall flag, see the HitDef documentation."
 },
 "HitOver": {
  "fmt": "HitOver",
  "doc": "If the player is in a gethit state, returns 1 when the hittime has expired, and 0 otherwise. For an explanation of hittime, see the HitDef documentation."
 },
 "HitPauseTime": {
  "fmt": "HitPauseTime",
  "doc": "Returns the time until the player's hitpause expires. The player enters a hitpause when his attack comes in contact with an opponent. The initial hitpause time is equal to the first value of the pausetime parameter in the player's HitDef. If ignorehitpause is not set, this will always return 0."
 },
 "HitShakeOver": {
  "fmt": "HitShakeOver",
  "doc": "If the player is in a gethit state, returns 1 if the hit shake (the period when he is shaking in place) has ended, and 0 otherwise."
 },
 "HitVel": {
  "fmt": "HitVel",
  "doc": "Gets the value of the velocity imparted to the player by a hit.\nYou must specify the component that you want to check, eg.\n\"HitVel Y\" to check the vertical velocity component."
 },
 "ID": {
  "fmt": "ID",
  "doc": "Returns the ID number of the player. The ID number is unique for every player throughout the course of a match. Any helper that is created during this time will also receive its own unique ID number. This trigger may be useful for getting opponents' ID numbers, to be later used with the \"playerID\" redirection keyword (see exp docs). Do not confuse playerID with targetID."
 },
 "IfElse (math)": {
  "fmt": "IfElse(\"\",\"\",\"\")",
  "doc": "This trigger takes three arguments. If the first is nonzero, IfElse returns the\nvalue of the second argument. Else, it returns the value of the third argument.\nAll arguments are evaluated prior to execution of IfElse. In particular, any\nside effects caused by evaluation of the arguments (such as variable\nassignment, or performing a computation that generates a warning) will occur.\nIf you wish to avoid these side effects, then use Cond."
 },
 "InGuardDist": {
  "fmt": "InGuardDist",
  "doc": "Returns 1 if the player is within guarding distance of an opponent's physical or projectile attack. The guarding distance is the value of the guard.dist parameter of the opponent's HitDef. Returns 0 if out of guard distance, or the opponent is not attacking."
 },
 "IsHelper": {
  "fmt": "IsHelper",
  "doc": "This trigger takes an optional ID number as an argument. If the ID number is omitted, IsHelper returns 1 if the player is a helper character, and 0 otherwise. If the ID number is included, then IsHelper returns 1 if the player is a helper character with the specified ID number, and 0 otherwise."
 },
 "IsHomeTeam": {
  "fmt": "IsHomeTeam",
  "doc": "Returns 1 if the player's team is considered the \"home team\". In arcade modes, the computer is always considered the home team. In versus modes, P1's side (left) is the home team."
 },
 "Life": {
  "fmt": "Life",
  "doc": "Returns the player's life."
 },
 "LifeMax": {
  "fmt": "LifeMax",
  "doc": "Returns the maximum amount of life the player can have. This is normally the value of the \"life\" parameter in the [Data] group of the player variables, but may be different in situations such as team modes."
 },
 "Ln (math)": {
  "fmt": "ln(0)",
  "doc": "Returns the natural logarithm of its argument. This produces slightly more accurate results than the otherwise equivalent expression log(e,(argument))."
 },
 "Log (math)": {
  "fmt": "Log(\"\",\"\")",
  "doc": "Takes two arguments a and b, and returns the base-a logarithm of b."
 },
 "Lose": {
  "fmt": "Lose",
  "doc": "Returns 1 if the player (or the player's team, in team mode) has lost the round, 0 otherwise. Can be suffixed with \"KO\" or \"Time\" to return 1 only when the round has been lost by a KO or by time expiring, respectively."
 },
 "MatchNo": {
  "fmt": "MatchNo",
  "doc": "Returns the current match number."
 },
 "MatchOver": {
  "fmt": "MatchOver",
  "doc": "Returns 1 if the match has ended. (For example, in the case of a best-of-three match, this will return true when one of the players or teams has won two rounds.)"
 },
 "MoveContact": {
  "fmt": "MoveContact",
  "doc": "This trigger is valid only when the player is in an attack state.\nMoveContact gives a non-zero value if P2 has either been hit, or has guarded P1's attack. It gives 0 otherwise. P1 is the player, and P2 is his opponent.\nTypically used with the \"StateNo\" and \"Command\" triggers for detecting move-interrupts in the CMD file."
 },
 "MoveGuarded": {
  "fmt": "MoveGuarded",
  "doc": "This trigger is valid only when the player is in an attack state.\nMoveGuarded gives a non-zero value if P2 is guarding, or has guarded, P1's attack. It gives 0 otherwise. P1 is the player, and P2 is his opponent.\nTypically used with the \"StateNo\" and \"Command\" triggers for detecting move-interrupts in the CMD file."
 },
 "MoveHit": {
  "fmt": "MoveHit",
  "doc": "This trigger is valid only when the player is in an attack state.\nMoveHit gives a non-zero value if P2 has been hit by P1's attack. It gives 0 otherwise.\nTypically used with the \"StateNo\" and \"Command\" triggers for detecting move-interrupts in the CMD file."
 },
 "MoveType(*,***)": {
  "fmt": "MoveType = \"\"",
  "doc": "MoveType gives the player's move-type. Refer to the section\non StateDef in the CNS documentation for more details on MoveType.\nUseful for \"move interrupts\" in the CMD file."
 },
 "MoveReversed": {
  "fmt": "MoveReversed",
  "doc": "This trigger is valid only when the player is in an attack state.\nMoveReversed gives a non-zero value if P1's attack has been reversed by P2. It gives 0 otherwise."
 },
 "Name(*,***)": {
  "fmt": "Name = \"\"",
  "doc": "Returns the player's name (the internal name specified in the .DEF file, which may not be the same as the displayed name)."
 },
 "NumEnemy": {
  "fmt": "NumEnemy",
  "doc": "NumEnemy returns the number of opponents that exist. Neutral players and normal helpers are not considered opponents."
 },
 "NumExplod": {
  "fmt": "NumExplod",
  "doc": "This trigger takes an ID number as an optional argument. If the ID number is omitted, NumExplod returns the number of explods owned by the player. If the ID number is included, then NumExplod returns the number of explods with that ID number that are owned by the player. The ID number must be greater than -1. An ID number of -1 or less will give the same behavior as if the ID number is omitted."
 },
 "NumHelper": {
  "fmt": "NumHelper",
  "doc": "This trigger takes an ID number as an optional argument. If the ID number is omitted, then NumHelper returns the total number of helpers currently owned by the player. If the ID number is included, then NumHelper returns the total number of helpers with that ID number owned by the player. The ID number must be greater than 0. If the ID\nnumber is 0 or less, then all helpers are counted."
 },
 "NumPartner": {
  "fmt": "NumPartner",
  "doc": "NumPartner returns the number of partners that exist. Neutral players and normal helpers are not considered partners."
 },
 "NumProj": {
  "fmt": "NumProj",
  "doc": "Returns the total number of projectiles currently owned by the player."
 },
 "NumProjID": {
  "fmt": "NumProjID(0)",
  "doc": "This trigger takes an ID number as a required argument. It returns the number of projectiles currently owned by the player and having the specified ID number."
 },
 "NumTarget": {
  "fmt": "NumTarget",
  "doc": "This trigger takes an ID number as an optional argument. If the ID number is omitted, NumTarget returns the current number of targets for the player. If the ID number is included, then NumTarget returns the number of targets for the player which have that target ID number. The ID number must be greater than -1. An ID number of -1 or less will give the same behavior as if the ID number is omitted."
 },
 "P2BodyDist": {
  "fmt": "P2BodyDist",
  "doc": "Returns the distance of P2 from P1, where P1 is the player, and P2 is his opponent. P2BodyDist is useful in the CMD for cases where P1 has an attack that is different when performed close to P2."
 },
 "P2Dist": {
  "fmt": "P2Dist",
  "doc": "Returns the distance of P2 from P1, where P1 is the player, and P2 is his opponent."
 },
 "PalNo": {
  "fmt": "PalNo",
  "doc": "Returns the palette number of the player (i.e., the color scheme chosen for the character during character select.)"
 },
 "ParentDist": {
  "fmt": "ParentDist",
  "doc": "This trigger is only valid for helper-type characters.\nParentDist returns the distance from the helper to its parent. It works similarly to P2Dist."
 },
 "Pi (math)": {
  "fmt": "pi",
  "doc": "This trigger returns the numeric value of pi (3.141593...)"
 },
 "Pos": {
  "fmt": "Pos",
  "doc": "Gets the value of the player's position. You must specify the component that you want to check, eg. \"Pos Y\" to check the Y-position."
 },
 "Power": {
  "fmt": "Power",
  "doc": "Returns the amount of power the player has."
 },
 "PowerMax": {
  "fmt": "PowerMax",
  "doc": "Returns the maximum amount of power the player can have. This is normally 3000 (level 3)."
 },
 "PlayerIDExist": {
  "fmt": "PlayerIDExist(0)",
  "doc": "Returns 1 if a player with the specified ID number exists, 0 otherwise. This ID number is obtained using the \"ID\" trigger (see ID). Do not confuse PlayerID with TargetID."
 },
 "PrevStateNo": {
  "fmt": "StateNo",
  "doc": "Returns the number of the state that the player was last in. The results of this trigger are not guaranteed to be accurate."
 },
 "ProjCancelTime": {
  "fmt": "ProjCancelTime(0)",
  "doc": "This trigger takes an required nonnegative ID number as an argument.  If the player's last projectile to make any kind of contact was cancelled by an opponent's projectile and had the specified ID number, then ProjCancelTime returns the number of ticks since that contact occurred. If the specified ID number is 0, then the projectile ID is not checked. If no projectile meets all the above conditions, then ProjCancelTime returns -1."
 },
 "ProjContact(*,***)": {
  "fmt": "ProjContact0 = 0",
  "doc": "This trigger takes an optional ID number as a suffix. If the ID number is omitted, ProjContact returns true if any of the player's projectiles either successfully hit the opponent or were guarded by the opponent. When the ID number is specified, ProjContact returns true only if any of the player's projectiles with the specified ID number either successfully hit the opponent or was guarded."
 },
 "ProjContactTime": {
  "fmt": "ProjContactTime(0)",
  "doc": "This trigger takes an required nonnegative ID number as an argument.  If the player's last projectile to make any kind of contact, made contact with the opponent and had the specified ID number, then ProjContactTime returns the number of ticks since that contact occurred. If the specified ID number is 0, then the projectile ID is not checked. If no projectile meets all the above conditions, then ProjContactTime returns -1."
 },
 "ProjGuarded(*,***)": {
  "fmt": "ProjGuarded0 = 0",
  "doc": "This trigger takes an optional ID number as a suffix. If the ID number is omitted, ProjGuarded returns true if any of the player's projectiles were guarded by the opponent. When the ID number is specified, ProjGuarded returns true only if one of the player's projectiles with the specified ID number was guarded by the opponent."
 },
 "ProjGuardedTime": {
  "fmt": "ProjCancelTime(0)",
  "doc": "This trigger takes an required nonnegative ID number as an argument.  If the player's last projectile to make any kind of contact was guarded by the opponent and had the specified ID number, then ProjGuardedTime returns the number of ticks since that contact occurred. If the specified ID number is 0, then the projectile ID is not checked. If no projectile meets all the above conditions, then ProjGuardedTime returns -1."
 },
 "ProjHit(*,***)": {
  "fmt": "ProjHit0 = 0",
  "doc": "This trigger takes an optional positive ID number as a suffix. If the ID number is omitted, ProjHit returns true if any of the player's projectiles successfully hit the opponent. When the ID number is specified, ProjHit returns true only if one of the player's projectiles with the specified ID number successfully hit the opponent."
 },
 "ProjHitTime": {
  "fmt": "ProjHitTime(0)",
  "doc": "This trigger takes an required nonnegative ID number as an argument.  If the player's last projectile to make any kind of contact successfully hit the opponent and had the specified ID number, then ProjHit returns the number of ticks since that contact occurred. If the specified ID number is 0, then the projectile ID is not checked.\nIf no projectile meets all the above conditions, then ProjHitTime returns -1."
 },
 "Random": {
  "fmt": "Random",
  "doc": "Returns a random number between 0 and 999, inclusive."
 },
 "RootDist": {
  "fmt": "RootDist",
  "doc": "This trigger is only valid for helper-type characters.\nRootDist returns the distance from the helper to its root. The root is the main player character who owns the helper: for instance, if you select Kumquat to play with, and Kumquat spawns a helper named Kiwi, who in turn spawns a helper named Penguin, then Penguin's root is Kumquat, and Penguin is a descendant of Kumquat. RootDist works similarly to P2Dist."
 },
 "RoundNo": {
  "fmt": "RoundNo",
  "doc": "Returns the current round number."
 },
 "RoundsExisted": {
  "fmt": "RoundsExisted",
  "doc": "Returns the number of rounds the player has existed for. On the first round, returns 0. This is useful for a Turns mode intro."
 },
 "RoundState": {
  "fmt": "RoundState",
  "doc": "Returns the current round state number."
 },
 "ScreenPos": {
  "fmt": "Pos",
  "doc": "Gets the value of the player's absolute (screen-relative) position. You must specify the component that you want to check, eg. \"Pos Y\" to check the Y-position."
 },
 "Sin (math)": {
  "fmt": "sin(0)",
  "doc": "Computes the sine of the specified argument (in radians.)"
 },
 "StateNo": {
  "fmt": "StateNo",
  "doc": "Returns the player's current state number. Useful for \"move interrupts\" in the CMD file."
 },
 "StateType": {
  "fmt": "StateType = \"\"",
  "doc": "StateType gives the player's state-type. Refer to the section\non StateDef in the CNS documentation for more details on StateType.\nUseful for \"move interrupts\" in the CMD file."
 },
 "StageVar(*,***)": {
  "fmt": "StageVar(\"\") = \"\"",
  "doc": "Returns information about the stage.\nA limited number of parameters are supported."
 },
 "SysFVar": {
  "fmt": "FVar(0)",
  "doc": "This trigger takes a mandatory variable number as an argument. It returns the value of the player's specified system float variable.\nThis trigger should NOT be used under normal circumstances. System\nvariables are reserved for bookkeeping in common1.cns."
 },
 "SysVar": {
  "fmt": "Var(0)",
  "doc": "This trigger takes a mandatory variable number as an argument. It returns the value of the player's specified system int variable.\nThis trigger is NOT to be used under normal circumstances. System\nvariables are reserved for bookkeeping in common1.cns."
 },
 "Tan (math)": {
  "fmt": "tan(0)",
  "doc": "Computes the tangent of the specified argument (in radians.)"
 },
 "TeamMode(*,***)": {
  "fmt": "TeamMode = \"\"",
  "doc": "TeamMode gives the current mode of play for the player's team."
 },
 "TeamSide": {
  "fmt": "TeamSide",
  "doc": "Returns the team side the player is on. 1 represents P1 side (left), 2 for P2 side (right)."
 },
 "TicksPerSecond": {
  "fmt": "TicksPerSecond",
  "doc": "Returns the number of ticks per second. Useful for time calculations."
 },
 "Time": {
  "fmt": "Time",
  "doc": "Returns the state-time of the player (that is, the number of ticks that the player has been in the current state so far)."
 },
 "TimeMod(*,**,***)": {
  "fmt": "TimeMod = 0, 0",
  "doc": "Returns the remainder when the state-time of the player is divided by the specified value. The % operator subsumes the functionality of TimeMod, so it is recommended that you use % instead."
 },
 "UniqHitCount": {
  "fmt": "UniqHitCount",
  "doc": "Returns the total number of hits the player's current attack move has done. This value is valid only for a single state; after any state change, it resets to 0. To prevent it from resetting to 0, set hitcountpersist in the StateDef (see cns documentation for details). The HitCount and UniqHitCount triggers differ only when the player is hitting more than one opponent. In the case where the player is hitting two opponents with the same attack, HitCount will increase by 1 for every hit, while UniqHitCount increases by 2."
 },
 "Var": {
  "fmt": "Var(0)",
  "doc": "This trigger takes a mandatory variable number as an argument. It returns the value of the player's specified int variable."
 },
 "Vel": {
  "fmt": "Vel",
  "doc": "Gets the value of the player's velocity. You must specify the component that you want to check, eg. \"Vel Y\" to check the Y-velocity."
 }
}
