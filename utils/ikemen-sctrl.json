{
 "AssertInput": {
  "doc": "This controller allows you to assert up to three input flags simultaneously via single sctrl. Similarly to AssertSpecial, there is no limit how many times this controller is called. Each flag will be automatically \"de-asserted\" at every game tick, so you must assert a flag for each tick that you want it to be active. Ikemen interprets input flags the same was as if corresponding input keys were pressed.",
  "req": [
   "flag"
  ],
  "opt": [
   "flag2",
   "flag3"
  ]
 },
 "Dialogue": {
  "doc": "Assigns a dialogue data to be displayed either right before lifebar calls fight during first round (last frame of  RoundState = 1) or at the last active frame of the final round (RoundState = 4, right before screen starts fading out). If more than 1 player calls this sctrl, who will end up initiating dialogue is chosen randomly.\nHow the rendered dialogue will look like (positioning, default face sprites, background definition, default time between text etc.) is controlled by `[Dialogue Info]` screenpack parameters (refer to system.def distributed with engine for a working example). By default player who called the state controller will use screenpack parameters prefixed with *p1* and his *enemy(0)* will be assigned to use *p2* parameters (this is adjustable via text tokens).\nWith appropriate screenpack parameters it's possible to skip to the next *text* parameter during dialogue via button press, without ending it all together. If this screenpack group is missing, dialogue won't be initiated at all (`enabled` parameter defaults to 0).\nTokens prefixed with *pX* (where X is 1 or 2) refers to screenpack `[Dialogue Info]` parameters prefixed the same way. Some tokens accepts *redirection* argument that points to which player assets (sprite, sound, anim, state) should be used.",
  "req": [
   "textX"
  ],
  "opt": [
   "hidebars",
   "force"
  ]
 },
 "DizzySet": {
  "doc": "Sets the player's Dizzy flag. For the duration that this flag is set, combo hit counter does not reset and the combo count lifebar text will stay on screen.",
  "req": [
   "value"
  ],
  "opt": []
 },
 "DizzyPointsAdd": {
  "doc": "Adds the specified amount to the player's dizzy points.",
  "req": [
   "value"
  ],
  "opt": []
 },
 "DizzyPointsSet": {
  "doc": "Sets the amount of dizzy points that the player has.",
  "req": [
   "value"
  ],
  "opt": []
 },
 "GuardBreakSet": {
  "doc": "Sets the player's Guard Break flag.",
  "req": [
   "value"
  ],
  "opt": []
 },
 "GuardPointsAdd": {
  "doc": "Adds the specified amount to the player's guard points.",
  "req": [
   "value"
  ],
  "opt": []
 },
 "GuardPointsSet": {
  "doc": "Sets the amount of guard points that the player has.",
  "req": [
   "value"
  ],
  "opt": []
 },
 "HitScaleSet": {
  "doc": "Configures the damage scales based on the parameters provided.\nHitscale effects stacks multiplicatively (being applied on each hit and the cumulative effect can be calculated by multiplying the effects together)\nIf there is a HitScale for a specific ID it takes priority over the default one.\nThe damage scale gets reset once the enemy char leaves hit state.",
  "req": [
   "affects",
   "mul** `float` Damage multiplier. For example a **mul",
   "add"
  ],
  "opt": [
   "id",
   "addType** `string` Specifies how **add** and **mul",
   "add** then multiplies the damage by **mul",
   "mul** the adds **add",
   "min",
   "max** `float` Maximum damage scale, takes into account both **mul",
   "reset",
   "force"
  ]
 },
 "LifebarAction": {
  "doc": "Displays text/sprites/anims synchronized with each other, using [lifebar data](Lifebar-features/#new_action). The intended use case is implementation of messages, often found in commercial fighting games.\nRefer to *data/action.zss* file and default lifebar distributed with engine for a working example.",
  "req": [],
  "opt": [
   "top",
   "time",
   "timemul",
   "anim",
   "spr",
   "snd",
   "text"
  ]
 },
 "LoadFile": {
  "doc": "Loads the specified data and overrides the data of the execution character. Note that all the data before reading will disappear.",
  "req": [
   "savedata",
   "path"
  ],
  "opt": []
 },
 "MapAdd": {
  "doc": "Adds value to player's map.",
  "req": [
   "map",
   "value"
  ],
  "opt": []
 },
 "MapSet": {
  "doc": "Sets value to player's map. This state controller can be used to change a number that has already been set via character's DEF file or to set a new map.",
  "req": [
   "map",
   "value"
  ],
  "opt": []
 },
 "MatchRestart": {
  "doc": "Reset the round or match and resume. By default (when no optional parameters are set) has the same effect as F4 debug key (round restart). Optionally allows characters and stage reloading, which also changes the state controller functionality to work like shift+F4 debug key (match restart).",
  "req": [],
  "opt": [
   "pXdef",
   "stagedef",
   "reload"
  ]
 },
 "ModifyBGCtrl": {
  "doc": "Modifies the parameters of an existing stage [background controller](http://www.elecbyte.com/mugendocs/bgs.html#background-controllers).",
  "req": [
   "id"
  ],
  "opt": [
   "time",
   "value",
   "x",
   "y"
  ]
 },
 "ParentMapAdd": {
  "doc": "If the player is a helper, adds value to parent's map. If the player is not a helper, this controller does nothing. Parent refers to the instance that spawned the helper.",
  "req": [
   "map",
   "value"
  ],
  "opt": []
 },
 "ParentMapSet": {
  "doc": "If the player is a helper, sets value to parent's map. If the player is not a helper, this controller does nothing. Parent refers to the instance that spawned the helper.",
  "req": [
   "map",
   "value"
  ],
  "opt": []
 },
 "PlayBgm": {
  "doc": "Plays back a music. Supported file formats: *mp3*, *ogg*, *wav*.",
  "req": [],
  "opt": [
   "bgm",
   "loop",
   "volume",
   "loopstart",
   "loopend"
  ]
 },
 "PrintToConsole": {
  "doc": "This controller is only useful for debugging. PrintToConsole prints a specified message to debug mode console, as well as terminal / command line window, if it's opened.\nThe syntax is the same as DisplayToClipboard:",
  "req": [
   "text"
  ],
  "opt": [
   "params"
  ]
 },
 "RedLifeAdd": {
  "doc": "Adds the specified amount to the player's red life, scaled by the player's defense multiplier if necessary.",
  "req": [
   "value"
  ],
  "opt": [
   "absolute"
  ]
 },
 "RedLifeSet": {
  "doc": "Sets the amount of red life that the player has.",
  "req": [
   "value"
  ],
  "opt": []
 },
 "RemapSprite": {
  "doc": "Remaps one sprite with another (or does this for multiple sprites at once, based on character's CNS [RemapPreset](Character-features/#cns_remappreset) data)",
  "req": [],
  "opt": [
   "reset",
   "preset",
   "source",
   "dest"
  ]
 },
 "RootMapAdd": {
  "doc": "If the player is a helper, adds value to root's map. If the player is not a helper, this controller does nothing. Root refers to the main player.",
  "req": [
   "map",
   "value"
  ],
  "opt": []
 },
 "RootMapSet": {
  "doc": "If the player is a helper, sets value root's map. If the player is not a helper, this controller does nothing. Root refers to the main player.",
  "req": [
   "map",
   "value"
  ],
  "opt": []
 },
 "RootVarAdd": {
  "doc": "If the player is a helper, adds value to root's working variables. Either a float variable or an int variable can be added by this controller. If the player is not a helper, this controller does nothing. Root refers to the main player.",
  "req": [
   "v",
   "value",
   "fv",
   "value",
   "var(var_no)",
   "fvar(var_no)"
  ],
  "opt": []
 },
 "RootVarSet": {
  "doc": "If the player is a helper, sets value root's working variables. Either a float variable or an int variable can be set by this controller. If the player is not a helper, this controller does nothing. Root refers to the main player.",
  "req": [
   "v",
   "value",
   "fv",
   "value",
   "var(var_no)",
   "fvar(var_no)"
  ],
  "opt": []
 },
 "RoundTimeAdd": {
  "doc": "Add specified amount of ticks into round time.",
  "req": [
   "value"
  ],
  "opt": []
 },
 "RoundTimeSet": {
  "doc": "Set round time to specified amount of ticks.",
  "req": [
   "value"
  ],
  "opt": []
 },
 "SaveFile": {
  "doc": "Put specified data together and save it as binary. It uses gob, which is a serialized format for Go language, as the storage format. All characters specified by the character or helper who executed the function are stored at that time.",
  "req": [
   "savedata",
   "path"
  ],
  "opt": []
 },
 "ScoreAdd": {
  "doc": "Adds the specified amount of points to P1 current score counter.",
  "req": [
   "value"
  ],
  "opt": []
 },
 "TagIn": {
  "doc": "Makes the P1 and/or the specified partner exit Standby state. If no parameters are given it affects the player that called it. (Also affects helpers)",
  "req": [],
  "opt": [
   "ctrl",
   "leader",
   "partnerctrl"
  ]
 },
 "TagOut": {
  "doc": "Makes the P1 and/or the specified partner enter Standby state. If no parameters are given it affects the player that called it. (Also affects helpers)",
  "req": [],
  "opt": [
   "self",
   "partner",
   "stateno",
   "partnerstateno"
  ]
 },
 "TargetDizzyPointsAdd": {
  "doc": "Adds the specified amount to all targets' dizzy points.",
  "req": [
   "value"
  ],
  "opt": [
   "ID"
  ]
 },
 "TargetGuardPointsAdd": {
  "doc": "Adds the specified amount to all targets' guard points.",
  "req": [
   "value"
  ],
  "opt": [
   "ID"
  ]
 },
 "TargetRedLifeAdd": {
  "doc": "Adds the specified amount to all targets' red life, scaled by the targets' defense multipliers if necessary.",
  "req": [
   "value"
  ],
  "opt": [
   "ID",
   "absolute"
  ]
 },
 "TargetScoreAdd": {
  "doc": "Adds the specified amount of points to targets' current score counter.",
  "req": [
   "value"
  ],
  "opt": [
   "ID"
  ]
 },
 "TeamMapAdd": {
  "doc": "Adds value to all team members maps.",
  "req": [
   "map",
   "value"
  ],
  "opt": []
 },
 "TeamMapSet": {
  "doc": "Sets value to all team members maps.",
  "req": [
   "map",
   "value"
  ],
  "opt": []
 },
 "Text": {
  "doc": "Text controller is used for displaying text on screen.",
  "req": [],
  "opt": [
   "removetime",
   "layerno",
   "text",
   "params",
   "font",
   "bank",
   "align",
   "pos",
   "scale",
   "color"
  ]
 }
}
