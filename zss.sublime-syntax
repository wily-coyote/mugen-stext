%YAML 1.2
---
name: Zantei State Script
file_extensions:
  - zss
scope: source.zss

variables:
  identifier: '[a-zA-Z-._][a-zA-Z0-9-._]*'

contexts:
  prototype:
    - include: comments

  main:
    - include: function_declaration
    - include: sections
    - include: variables
    - include: keywords
    - include: modifier
    - include: operators
    - include: functions
    - include: numbers
    - include: strings
    - include: everything_else

  inside_function:
    - include: variables
    - include: keywords
    - include: operators
    - include: functions
    - include: numbers
    - include: strings
    - include: everything_else

  sections:
    - include: numbers
    - match: '^\s*\['
      scope: punctuation.section.group.begin.zss
      push:
        - meta_scope: keyword.context.block.zss
        - include: numbers
        - match: '({{identifier}})\s*:'
          captures:
            1: string.unquoted.zss
          push:
            - clear_scopes: 1
            - include: numbers
            - include: everything_else
            - match: '-'
              scope: keyword.operator.arithmetic.zss
            - match: ;
              scope: keyword.control.block.zss
              pop: true
            - include: functions
        - include: functions
        - match: '\]'
          scope: punctuation.section.group.end.zss
          pop: true

  keywords:
    - match: '\b(if|else|for|while|let|call|switch|case|default|break|continue)\b'
      scope: keyword.control.zss

  modifier:
    - match: '(?i)\b(ignorehitpause|persistent)\b'
      scope: variable.annotation.zss


  variables:
    - match: '\${{identifier}}'
      scope: variable.other.zss

  function_declaration:
    - include: numbers
    - match: '(?i)^\s*\[function'
      scope: punctuation.section.group.begin.zss
      push:
        - meta_scope: keyword.context.block.zss
        - include: numbers
        - match: '({{identifier}})\s*(\()'
          captures:
            1: entity.name.function.zss
            2: punctuation.section.group.begin.zss
          push:
            - clear_scopes: 1
            - match: '{{identifier}}'
              scope: variable.parameter.zss
            - match: '\)'
              scope: punctuation.section.group.end.zss
              pop: true
        - match: '[\]\n]'
          scope: punctuation.section.group.end.zss
          pop: true

  operators:
    - match: '(!|~|-|\*\*|\*|/|%|\+|>|>=|<|<=|=|!=|:=|&|\^|\||&&|\^\^|\|\|)'
      scope: keyword.operator.arithmetic.zss

  numbers:
    - match: '\.?\b[0-9]+\b'
      scope: constant.numeric.zss

  functions:
    - match: '(?i)(const|stagevar|stageconst|gethitvar|map)\s*(\()'
      captures:
        1: variable.function.zss
        2: punctuation.section.group.begin.zss
      push:
        - meta_content_scope: string.unquoted.zss
        - match: \)
          scope: punctuation.section.group.end.zss
          pop: true
    - match: '({{identifier}})\s*(\()'
      captures:
        1: variable.function.zss
        2: punctuation.section.group.begin.zss
      push:
        - clear_scopes: 1
        - include: inside_function
        - match: \)
          scope: punctuation.section.group.end.zss
          pop: true
    - match: '({{identifier}})\s*({)'
      captures:
        1: variable.function.zss
        2: punctuation.section.group.begin.zss
      push:
        - match: '({{identifier}})\s*:'
          captures:
            1: string.unquoted.zss
        - include: inside_function
        - match: \}
          scope: punctuation.section.group.end.zss
          pop: true
    - match: '({{identifier}})\s+([a-zA-Z])\b'
      captures:
        1: variable.function.zss

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.zss
      push:
        - meta_scope: string.quoted.double.zss
        - match: '"'
          scope: punctuation.definition.string.end.zss
          pop: true
        - match: \n
          scope: invalid.illegal.zss
          pop: true
    - match: \'
      scope: punctuation.definition.string.begin.zss
      push:
        - meta_scope: string.quoted.single.zss
        - match: \'
          scope: punctuation.definition.string.end.zss
          pop: true
        - match: \n
          scope: invalid.illegal.zss
          pop: true

  everything_else:
    - match: '{{identifier}}'
      scope: variable.function.zss

  comments:
    - match: '#'
      scope: punctuation.definition.comment.zss
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.zss
        - match: $\n?
          pop: true
